---
title: "Lab 13"
author: "Patric Young"
format: pdf
editor: visual
---

# Section 1. Differential Expression Analysis


```{r}
metaFile <- "data/GSE37704_metadata.csv"
countFile <- "data/GSE37704_featurecounts.csv"
```

```{r}
colData = read.csv("GSE37704_metadata.csv", row.names=1)
head(colData)
```

```{r}
countDataTmp = read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countDataTmp)
```

**Q1**. Complete the code below to remove the troublesome first column from `countData`

```{r}
countData <- as.matrix(countDataTmp[,-1])
head(countData)
```

Check that my metadata and countdata match.

```{r}
rownames(colData) == colnames(countData)
```

**Q2**. Complete the code below to filter `countData` to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).


```{r}
head(countData)
```

# DESeq2 Analysis

```{r}
head(colData)
```

Setup the object that DESeq needs for analysis with the lovely, long-winded function:

```{r}
DESeqDataSetFromMatrix(countData = countData,
                       colData = colData,
                       design = ~condition)
```

Run the analysis:

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```

```{r}
dds
```

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```


**Q3**. Call the **summary()** function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.


```{r}
summary(res)
```
## Volcano Plot 

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

Make some colors to highlight the subset of genes with high fold change values.

```{r}
mycols <- rep("gray", nrow(res) )


mycols[ abs(res$log2FoldChange) > 2 ] <- "blue"
mycols[res$padj > 0.5] = "gray"


plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(-2,2), lty=2)

```



```{r}
x <- 1:5
x

mycols <- rep("gray", length(x))
mycols[x > 2] <- "blue"
  mycols[x == 5] <- "red"
    mycols
```




# Add Gene Annotation

We will load up annotationDbi and our Human Data package to add gene symbols and entrez IDs to our results object.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol <- mapIds(org.Hs.eg.db,
                     column="SYMBOL",
                     keys = rownames(res),
                     multiVals="first",
                     keytype = "ENSEMBL")
res$entrez = mapIds(org.Hs.eg.db,
                    keys= rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")
res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res,10)
```

# Genset Enrichment Analysis (Pathway Analysis)

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

![](hsa04110.png)

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04110.pathview.png)

![](hsa04740.pathview.png)

![](hsa04640.pathview.png)

![](hsa00140.pathview.png)

![](hsa04630.pathview.png)

![](hsa04976.pathview.png)

![](hsa04740.png)

![](hsa04640.png)

![](hsa00140.png)

![](hsa04630.png)

![](hsa04976.png)

# Section 3. Gene Ontology (GO)

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis
```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

